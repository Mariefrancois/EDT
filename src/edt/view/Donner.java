/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Donner.java
 *
 * Created on 26 mars 2012, 00:28:50
 */
package edt.view;

import com.sun.java.swing.plaf.windows.resources.windows;
import edt.Classe.*;
import edt.Frame.*;
import edt.mysql.BD_MySQL;
import java.awt.Frame;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marie
 */
public class Donner extends javax.swing.JPanel {
    private New_UE ued;
    private New_Intervenant inter;
    private NewSalle salle;
    private New_Etudiant etud;
    private New_Batiment batiment;
    private int id;
    private int id_promo;
    private ArrayList<Etudiant> list_etu;
    private ArrayList<UE> list_ue;
    private ArrayList<Salle> list_salle;
    private ArrayList<Intervenant> list_inter;
    private ArrayList<Promotion> list_promo;
    private NewPromotion promotion;
    private New_Seance creneau;
    /** Creates new form Donner */
    public Donner() {
        initComponents();
        this.id = 0;
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titre = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        modifier = new javax.swing.JButton();
        supprimer = new javax.swing.JButton();
        ajouter = new javax.swing.JButton();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edt.EDTApp.class).getContext().getResourceMap(Donner.class);
        titre.setText(resourceMap.getString("titre.text")); // NOI18N
        titre.setName("titre"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        
        jTable1.setName("jTable1"); // NOI18N
		jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        modifier.setText(resourceMap.getString("modifier.text")); // NOI18N
        modifier.setName("modifier"); // NOI18N
        modifier.setEnabled(false);
		modifier.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifierActionPerformed(evt);
            }
        });

        supprimer.setText(resourceMap.getString("supprimer.text")); // NOI18N
        supprimer.setName("supprimer"); // NOI18N
        supprimer.setEnabled(false);
		supprimer.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerActionPerformed(evt);
            }
        });

        ajouter.setText(resourceMap.getString("ajouter.text")); // NOI18N
        ajouter.setName("ajouter"); // NOI18N
		ajouter.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(titre))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 676, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(126, 126, 126)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ajouter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(supprimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modifier, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                .addContainerGap(193, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titre)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(modifier)
                        .addGap(18, 18, 18)
                        .addComponent(supprimer)
                        .addGap(18, 18, 18)
                        .addComponent(ajouter))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ajouter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton modifier;
    private javax.swing.JButton supprimer;
    private javax.swing.JLabel titre;
    // End of variables declaration//GEN-END:variables
	
 private void modifierActionPerformed(java.awt.event.ActionEvent evt) { 
        switch(etat){
            case UE:
                //interdit
                break;
            case UE1:
                ued = new New_UE(new java.awt.Frame(),"Ajouter une UE",true,this,"UE1",this.id,this.id_promo);
                ued.setVisible(true);
                etat = Etat.UE;
                break;
            case Intervenant:
                //interdit
                break;
            case Intervenant1:
                inter = new New_Intervenant(new java.awt.Frame(),"Ajouter un Intervenant",true,this,"Intervenant1",this.id);
                inter.setVisible(true);
                etat = Etat.Intervenant;
                break;
            case Salle:
                //interdit
                break;
            case Salle1:
                salle = new NewSalle(new java.awt.Frame(),"Ajouter une Salle",true,this,"Salle1",this.id);
                salle.setVisible(true);
                etat = Etat.Salle;
                break;
            case Etudiant:
                //interdit
                break;
            case Etudiant1:
                etud = new New_Etudiant(new java.awt.Frame(),"Ajouter un Etudiant",true,this,"Etudiant1",this.id,this.id_promo);
                etud.setVisible(true);
                etat = Etat.Etudiant;
                break;
            case Batiment:
                //interdit
                break;
            case Batiment1:
                this.batiment = new New_Batiment(new java.awt.Frame(),"Ajouter un Batiment",true,this,"Batiment1",this.id);
                this.batiment.setVisible(true);
                etat = Etat.Batiment;
                break;
            case Promotion:
                //interdit
                break;
            case Promotion1:
                this.promotion = new NewPromotion(new java.awt.Frame(),"Ajouter une Promotion",true,this,"Promotion1",this.id);
                this.promotion.setVisible(true);
                etat = Etat.Promotion;
                break;
            case Creneau:
                //interdit
                break;
            case Creneau1:
                this.creneau = new New_Seance(new java.awt.Frame(),"Ajouter une Creneau",true,this,"Creneau1",this.id, this.id_promo);
                this.creneau.setVisible(true);
                etat = Etat.Creneau;
                break;
        }
 }
 
 private void supprimerActionPerformed(java.awt.event.ActionEvent evt) { 
        switch(etat){
            case UE:
                //interdit
                break;
            case UE1:
                UE ue = null;
                try {
                   ue = new UE(this.id);
                } catch (SQLException ex) {
                    Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
                }
                ue.delete();
                refreshUE();
                etat = Etat.UE;
                break;
            case Intervenant:
                //interdit
                break;
            case Intervenant1:
                Intervenant inter = null;
                try {
                   inter = new Intervenant(this.id);
                } catch (SQLException ex) {
                    Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
                }
                inter.delete();
                refreshIntervenant();
                etat = Etat.Intervenant;
                break;
            case Salle:
                //interdit
                break;
            case Salle1:
                Salle salle = null;
                try {
                   salle = new Salle(this.id);
                } catch (SQLException ex) {
                    Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
                }
                salle.delete();
                refreshSalle();
                etat = Etat.Salle;
                break;
            case Etudiant:
                //interdit
                break;
            case Etudiant1:
                Etudiant etu = null;
                try {
                   etu = new Etudiant(this.id);
                } catch (SQLException ex) {
                    Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
                }
                etu.delete();
                refreshEtudiant();
                etat = Etat.Etudiant;
                break;
            case Batiment:
                //interdit
                break;
            case Batiment1:
                Batiment bat = null;
                try {
                   bat = new Batiment(this.id);
                } catch (SQLException ex) {
                    Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
                }
                bat.delete();
                refreshBatiment();
                etat = Etat.Batiment;
                break;
            case Promotion:
                //interdit
                break;
            case Promotion1:
                Promotion promo = null;
                try {
                   promo = new Promotion(this.id);
                } catch (SQLException ex) {
                    Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
                }
                promo.delete();
                refreshPromotion();
                etat = Etat.Promotion;
                break;
            case Creneau:
                //interdit
                break;
            case Creneau1:
                Seance seance = null;
                try {
                   seance = new Seance(this.id);
                } catch (SQLException ex) {
                    Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
                }
                seance.delete();
                refreshPromotion();
                etat = Etat.Creneau;
                break;
        }
 }
 private void ajouterActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        switch(etat){
            case UE:
                this.ued = new New_UE(new java.awt.Frame(),"Ajouter une UE",true,this,"UE",0,this.id_promo);
                this.ued.setVisible(true);
                etat = Etat.UE;
                break;
            case UE1:
                this.ued = new New_UE(new java.awt.Frame(),"Ajouter une UE",true,this,"UE",0,this.id_promo);
                this.ued.setVisible(true);
                etat = Etat.UE;
                break;
            case Intervenant:
                this.inter = new New_Intervenant(new java.awt.Frame(),"Ajouter un Intervenant",true,this,"Intervenant",0);
                this.inter.setVisible(true);
                etat = Etat.Intervenant;
                break;
            case Intervenant1:
                this.inter = new New_Intervenant(new java.awt.Frame(),"Ajouter un Intervenant",true,this,"Intervenant",0);
                this.inter.setVisible(true);
                etat = Etat.Intervenant;
                break;
            case Salle:
                this.salle = new NewSalle(new java.awt.Frame(),"Ajouter une Salle",true,this,"Salle",0);
                this.salle.setVisible(true);
                etat = Etat.Salle;
                break;
            case Salle1:
                this.salle = new NewSalle(new java.awt.Frame(),"Ajouter une Salle",true,this,"Salle",0);
                this.salle.setVisible(true);
                etat = Etat.Salle;
                break;
            case Etudiant:
                this.etud = new New_Etudiant(new java.awt.Frame(),"Ajouter un Etudiant",true,this,"Etudiant",0,this.id_promo);
                this.etud.setVisible(true);
                etat = Etat.Etudiant;
                break;
            case Etudiant1:
                this.etud = new New_Etudiant(new java.awt.Frame(),"Ajouter un Etudiant",true,this,"Etudiant",0,this.id_promo);
                this.etud.setVisible(true);
                etat = Etat.Etudiant;
                break;
            case Batiment:
                this.batiment = new New_Batiment(new java.awt.Frame(),"Ajouter un Batiment",true,this,"Batiment",0);
                this.batiment.setVisible(true);
                etat = Etat.Batiment;
                break;
            case Batiment1:
                this.batiment = new New_Batiment(new java.awt.Frame(),"Ajouter un Batiment",true,this,"Batiment",0);
                this.batiment.setVisible(true);
                etat = Etat.Batiment;
                break;
            case Promotion:
                this.promotion = new NewPromotion(new java.awt.Frame(),"Ajouter une Promotion",true,this,"Promotion",0);
                this.promotion.setVisible(true);
                etat = Etat.Promotion;
                break;
            case Promotion1:
                this.promotion = new NewPromotion(new java.awt.Frame(),"Ajouter une Promotion",true,this,"Promotion",0);
                this.promotion.setVisible(true);
                etat = Etat.Promotion;
                break;
            case Creneau:
                this.creneau = new New_Seance(new java.awt.Frame(),"Ajouter une Seance",true,this,"Creneau",0, this.id_promo);
                this.creneau.setVisible(true);
                etat = Etat.Creneau;
                break;
            case Creneau1:
                this.creneau = new New_Seance(new java.awt.Frame(),"Ajouter une Seance",true,this,"Creneau",0, this.id_promo);
                this.creneau.setVisible(true);
                etat = Etat.Creneau;
                break;
        }
    } 
   public void active_sup_modif(){
       this.supprimer.setEnabled(true);
       this.modifier.setEnabled(true);
   }
    public void desactive_sup_modif(){
       this.supprimer.setEnabled(false);
       this.modifier.setEnabled(false);
   }
   
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
	switch(etat){
            case UE:
                this.id = id_UE();
                active_sup_modif();
                etat = Etat.UE1;
                break;
            case UE1:
                this.id = id_UE();
                active_sup_modif();
                etat = Etat.UE1;
                break;
            case Intervenant:
                this.id = id_Intervenant();
                active_sup_modif();
                etat = Etat.Intervenant1;
                break;
            case Intervenant1:
                this.id = id_Intervenant();
                active_sup_modif();
                etat = Etat.Intervenant1;
                break;
            case Salle:
                this.id = id_Salle();
                active_sup_modif();
                etat = Etat.Salle1;
                break;
                
            case Salle1:
                this.id = id_Salle();
                active_sup_modif();
                etat = Etat.Salle1;
                break;
            case Etudiant:
                this.id = id_Etudiant();
                active_sup_modif();
                etat = Etat.Etudiant1;
                break;
            case Etudiant1:
                this.id = id_Etudiant();
                active_sup_modif();
                etat = Etat.Etudiant1;
                break;
            case Batiment:
                this.id = id_Batiment();
                active_sup_modif();
                etat = Etat.Batiment1;
                break;
            case Batiment1:
                this.id = id_Batiment();
                active_sup_modif();
                etat = Etat.Batiment1;
                break;
            case Promotion:
                this.id = id_Promotion();
                active_sup_modif();
                etat = Etat.Promotion1;
                break;
            case Promotion1:
                this.id = id_Promotion();
                active_sup_modif();
                etat = Etat.Promotion1;
                break;
            case Creneau:
                this.id = id_Creneau();
                active_sup_modif();
                etat = Etat.Creneau1;
                break;
            case Creneau1:
                this.id = id_Creneau();
                active_sup_modif();
                etat = Etat.Creneau1;
                break;
        }
    }
 //Tableau UE***************

 public ArrayList<String> list_intitule_UE(ArrayList<UE> liste_ue){
     ArrayList<String> liste_UE_promotion = new ArrayList();
     for (UE l : liste_ue) {
            liste_UE_promotion.add(l.getIntitule());
        }
     return liste_UE_promotion;
}
 public ArrayList<Integer> list_nbcour_UE(ArrayList<UE> liste_ue){
     ArrayList<Integer> liste_UE_promotion = new ArrayList();
     for (UE l : liste_ue) {
            liste_UE_promotion.add(l.getNbHeuresCours());
        }
     return liste_UE_promotion;
}
 public ArrayList<Integer> list_nbtp_UE(ArrayList<UE> liste_ue){
     ArrayList<Integer> liste_UE_promotion = new ArrayList();
     for (UE l : liste_ue) {
            liste_UE_promotion.add(l.getNbHeuresTP());
        }
     return liste_UE_promotion;
}
 public ArrayList<Integer> list_nbtd_UE(ArrayList<UE> liste_ue){
     ArrayList<Integer> liste_UE_promotion = new ArrayList();
     for (UE l : liste_ue) {
            liste_UE_promotion.add(l.getNbHeuresTD());
        }
     return liste_UE_promotion;
}
 public void refreshUE(){
    this.jTable1.doLayout();
    DefaultTableModel modell = new DefaultTableModel(
            new Object [4][5] ,
            new String [] {});	
    jTable1.setModel(modell);
    try {
        this.list_ue = BD_MySQL.liste_UE_promotion(this.id_promo);
    } catch (SQLException ex) {
        Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
    }
    ArrayList<String> listenom = UE.list_nom_UE(this.id_promo); 
    modell.addColumn("Nom", listenom.toArray()); 
    ArrayList<String> listeintitule = list_intitule_UE(this.list_ue); 
    modell.addColumn("Intitule", listeintitule.toArray()); 
    ArrayList<Integer> listenbCour = list_nbcour_UE(this.list_ue); 
    modell.addColumn("NB Heure Cours", listenbCour.toArray()); 
    ArrayList<Integer> listenbTP = list_nbtp_UE(this.list_ue); 
    modell.addColumn("NB Heure TP", listenbTP.toArray()); 
    ArrayList<Integer> listenbTD = list_nbtd_UE(this.list_ue); 
    modell.addColumn("NB Heure TD", listenbTD.toArray()); 
  }
 public void frame_UE(int id_promo){
    this.titre.setText("UE");
    this.ajouter.setText("Ajouter une UE");
    this.id_promo = id_promo;
    refreshUE();
}
//******************

 //Tableau Intervenant************
 public ArrayList<String> list_nom_Intervenant(ArrayList<Intervenant> liste_inter){
     ArrayList<String> list_nom_Intervenant = new ArrayList();
     for (Intervenant l : liste_inter) {
            list_nom_Intervenant.add(l.getNom());
        }
     return list_nom_Intervenant;
}
 public ArrayList<String> list_prenom_Intervenant(ArrayList<Intervenant> liste_inter){
     ArrayList<String> list_nom_Intervenant = new ArrayList();
     for (Intervenant l : liste_inter) {
            list_nom_Intervenant.add(l.getPrenom());
        }
     return list_nom_Intervenant;
}
public ArrayList<String> list_email_Intervenant(ArrayList<Intervenant> liste_inter){
     ArrayList<String> list_nom_Intervenant = new ArrayList();
     for (Intervenant l : liste_inter) {
            list_nom_Intervenant.add(l.getEmail());
        }
     return list_nom_Intervenant;
}
public ArrayList<String> list_telephone_Intervenant(ArrayList<Intervenant> liste_inter){
     ArrayList<String> list_nom_Intervenant = new ArrayList();
     for (Intervenant l : liste_inter) {
            list_nom_Intervenant.add(l.getTelephone());
        }
     return list_nom_Intervenant;
}
 public void refreshIntervenant(){
    this.jTable1.doLayout();
    DefaultTableModel modell = new DefaultTableModel(
            new Object [4][5] ,
            new String [] {});	
    jTable1.setModel(modell);
    try {
        this.list_inter = BD_MySQL.liste_Intervenant();
    } catch (SQLException ex) {
        Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
    }
    ArrayList<String> listenom = list_nom_Intervenant(this.list_inter); 
    modell.addColumn("Nom", listenom.toArray()); 
    ArrayList<String> listeprenom = list_prenom_Intervenant(this.list_inter); 
    modell.addColumn("Prénom", listeprenom.toArray()); 
    ArrayList<String> listeEmail = list_email_Intervenant(this.list_inter); 
    modell.addColumn("Email", listeEmail.toArray()); 
    ArrayList<String> listetelephone= list_telephone_Intervenant(this.list_inter); 
    modell.addColumn("Téléphone", listetelephone.toArray()); 
  }
public void frame_Intervenant(){
    this.titre.setText("Intervenant");
    this.ajouter.setText("Ajouter un Intervenant");
    refreshIntervenant();
}
//********************

//Tableau Etudiant ********************
public ArrayList<String> list_nom_etudiant(ArrayList<Etudiant> liste_etu){
     ArrayList<String> liste_etudiants_promotion = new ArrayList();
     for (Etudiant l : liste_etu) {
            liste_etudiants_promotion.add(l.getNom());
        }
     return liste_etudiants_promotion;
}
public ArrayList<String> list_prenom_etudiant(ArrayList<Etudiant> liste_etu){
     ArrayList<String> liste_etudiants_promotion = new ArrayList();
     for (Etudiant l : liste_etu) {
            liste_etudiants_promotion.add(l.getPrenom());
        }
     return liste_etudiants_promotion;
}
public ArrayList<Integer> list_NEtudiant_etudiant(ArrayList<Etudiant> liste_etu){
     ArrayList<Integer> liste_etudiants_promotion = new ArrayList();
     for (Etudiant l : liste_etu) {
            liste_etudiants_promotion.add(l.getNumeroEtudiant());
        }
     return liste_etudiants_promotion;
}
public ArrayList<String> list_telephone_etudiant(ArrayList<Etudiant> liste_etu){
     ArrayList<String> liste_etudiants_promotion = new ArrayList();
     for (Etudiant l : liste_etu) {
            liste_etudiants_promotion.add(l.getTelephone());
        }
     return liste_etudiants_promotion;
}
public ArrayList<String> list_email_etudiant(ArrayList<Etudiant> liste_etu){
     ArrayList<String> liste_etudiants_promotion = new ArrayList();
     for (Etudiant l : liste_etu) {
            liste_etudiants_promotion.add(l.getEmail());
        }
     return liste_etudiants_promotion;
}
public void frame_Etudiant(int id_promo){
    this.titre.setText("Etudiant");
    this.ajouter.setText("Ajouter un Etudiant");
    this.id_promo = id_promo;
    refreshEtudiant();
}
public void refreshEtudiant(){
    this.jTable1.doLayout();
    DefaultTableModel modell = new DefaultTableModel(
            new Object [4][5] ,
            new String [] {});	
    jTable1.setModel(modell);
    try {
        this.list_etu = BD_MySQL.liste_etudiants_promotion(this.id_promo);
    } catch (SQLException ex) {
        Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
    }
    ArrayList<String> listenom = list_nom_etudiant(this.list_etu); 
    modell.addColumn("Nom", listenom.toArray()); 
    ArrayList<String> listeprenom = list_prenom_etudiant(this.list_etu); 
    modell.addColumn("Prénom", listeprenom.toArray()); 
    ArrayList<Integer> listeNEtudiant = list_NEtudiant_etudiant(this.list_etu); 
    modell.addColumn("N°Etudiant", listeNEtudiant.toArray()); 
    ArrayList<String> listeTelephone = list_telephone_etudiant(this.list_etu); 
    modell.addColumn("Téléphone", listeTelephone.toArray()); 
    ArrayList<String> listeEmail = list_email_etudiant(this.list_etu); 
    modell.addColumn("Email", listeEmail.toArray());
    
}
//*************

//Tableau Salle ************
 public ArrayList<String> list_nom_Salle(ArrayList<Salle> liste_salle){
     ArrayList<String> liste_Salle_promotion = new ArrayList();
     for (Salle l : liste_salle) {
            liste_Salle_promotion.add(l.getNom());
        }
     return liste_Salle_promotion;
} 
 public ArrayList<String> list_nomBatiment_Salle(ArrayList<Salle> liste_salle){
     ArrayList<String> liste_Salle_promotion = new ArrayList();
     for (Salle l : liste_salle) {
            liste_Salle_promotion.add(l.getBatiment());
        }
     return liste_Salle_promotion;
}
 public ArrayList<Integer> list_Capacite_Salle(ArrayList<Salle> liste_salle){
     ArrayList<Integer> liste_Salle_promotion = new ArrayList();
     for (Salle l : liste_salle) {
            liste_Salle_promotion.add(l.getCapacite());
        }
     return liste_Salle_promotion;
}
public void refreshSalle() {
    this.jTable1.doLayout();
    DefaultTableModel modell = new DefaultTableModel(
            new Object [4][5] ,
            new String [] {});	
    jTable1.setModel(modell);
    try {
        this.list_salle = BD_MySQL.liste_Salle_promotion();
    } catch (SQLException ex) {
        Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
    }
    ArrayList<String> listeNomBatiment = list_nomBatiment_Salle(this.list_salle); 
    modell.addColumn("Batiment", listeNomBatiment.toArray()); 
    ArrayList<String> listenom = list_nom_Salle(this.list_salle); 
    modell.addColumn("Nom", listenom.toArray()); 
    ArrayList<Integer> listeCapacite = list_Capacite_Salle(this.list_salle); 
    modell.addColumn("Capacité", listeCapacite.toArray()); 
    
}
public void frame_Salle() {
    this.titre.setText("Salle");
    this.ajouter.setText("Ajouter une Salle");
    refreshSalle();
    
}
//**********************

//Tableau Promotion ************
 public ArrayList<String> list_nom_Promotion(ArrayList<Promotion> list_promo){
     ArrayList<String> liste_nom_promotion = new ArrayList();
     for (Promotion l : list_promo) {
            liste_nom_promotion.add(l.getNom());
        }
     return liste_nom_promotion;
} 
 public ArrayList<Integer> list_Annee_Promotion(ArrayList<Promotion> list_promo){
     ArrayList<Integer> liste_annee_promotion = new ArrayList();
     for (Promotion l : list_promo) {
            liste_annee_promotion.add(l.getAnnee());
        }
     return liste_annee_promotion;
}
 public ArrayList<Timestamp> list_debut_Promotion(ArrayList<Promotion> list_promo){
     ArrayList<Timestamp> list_debut_Promotion = new ArrayList();
     for (Promotion l : list_promo) {
            list_debut_Promotion.add(l.getTsDebut());
        }
     return list_debut_Promotion;
}
  public ArrayList<Timestamp> list_fin_Promotion(ArrayList<Promotion> list_promo){
     ArrayList<Timestamp> list_fin_Promotion = new ArrayList();
     for (Promotion l : list_promo) {
            list_fin_Promotion.add(l.getTsFin());
        }
     return list_fin_Promotion;
}
public void refreshPromotion() {
    this.jTable1.doLayout();
    DefaultTableModel modell = new DefaultTableModel(
            new Object [4][5] ,
            new String [] {});	
    jTable1.setModel(modell);
    try {
        this.list_promo = BD_MySQL.liste_Promotion();
    } catch (SQLException ex) {
        Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
    }
    ArrayList<String> listeNom = list_nom_Promotion(this.list_promo); 
    modell.addColumn("Nom", listeNom.toArray()); 
    ArrayList<Integer> listeAnne = list_Annee_Promotion(this.list_promo); 
    modell.addColumn("Anne", listeAnne.toArray()); 
    ArrayList<Timestamp> listeDebut = list_debut_Promotion(this.list_promo); 
    modell.addColumn("Date de début", listeDebut.toArray()); 
    ArrayList<Timestamp> listefin = list_fin_Promotion(this.list_promo); 
    modell.addColumn("Date de fin", listefin.toArray()); 
    
}
public void frame_Promotion() {
    this.titre.setText("Promotion");
    this.ajouter.setText("Ajouter une Promotion");
    refreshPromotion();
    
}
//**********************

//Tableau Batiment ************
 public ArrayList<String> list_nom_Batiment(ArrayList<Batiment> list_bati){
     ArrayList<String> liste_Batiment = new ArrayList();
     for (Batiment l : list_bati) {
            liste_Batiment.add(l.getNom());
        }
     return liste_Batiment;
} 
 public ArrayList<Double> list_longitude_Batiment(ArrayList<Batiment> list_bati){
     ArrayList<Double> liste_Batiment = new ArrayList();
     for (Batiment l : list_bati) {
            liste_Batiment.add(l.getLon());
        }
     return liste_Batiment;
}
 public ArrayList<Double> list_latitude_Batiment(ArrayList<Batiment> list_bati){
     ArrayList<Double> liste_Batiment = new ArrayList();
     for (Batiment l : list_bati) {
            liste_Batiment.add(l.getLat());
        }
     return liste_Batiment;
}
public void refreshBatiment() {
    this.jTable1.doLayout();
    DefaultTableModel modell = new DefaultTableModel(
            new Object [4][5] ,
            new String [] {});	
    jTable1.setModel(modell);
    ArrayList<Batiment> list_bati = null;
    try {
        list_bati = BD_MySQL.liste_Batiment();
    } catch (SQLException ex) {
        Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
    }
    ArrayList<String> listeNom = list_nom_Batiment(list_bati); 
    modell.addColumn("Nom", listeNom.toArray()); 
    ArrayList<Double> listeLatitude = list_latitude_Batiment(list_bati); 
    modell.addColumn("Latitude", listeLatitude.toArray()); 
    ArrayList<Double> listeLongitude = list_longitude_Batiment(list_bati); 
    modell.addColumn("Longitude", listeLongitude.toArray()); 
    
}
public void frame_Batiment() {
    this.titre.setText("Batiment");
    this.ajouter.setText("Ajouter un Batiment");
    refreshBatiment();
    
}
//**********************

//Tableau Seance ************
 public ArrayList<String> list_nom_Seance(ArrayList<Seance> list_sea){
     ArrayList<String> list_nom_Seance = new ArrayList();
     for (Seance l : list_sea) {
            list_nom_Seance.add(l.getNom());
        }
     return list_nom_Seance;
} 
 public ArrayList<String> list_UE_Seance(ArrayList<Seance> list_sea){
     ArrayList<String> list_UE_Seance = new ArrayList();
     for (Seance l : list_sea) {
            try {
                list_UE_Seance.add(UE.nomUE(l.getIdUE()));
            } catch (SQLException ex) {
                Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     return list_UE_Seance;
}
 public ArrayList<String> list_Intervenant_Seance(ArrayList<Seance> list_sea){
     ArrayList<String> list_Intervenant_Seance = new ArrayList();
     for (Seance l : list_sea) {
            try {
                list_Intervenant_Seance.add(Intervenant.nomIntervenant(l.getIdIntervenant()));
            } catch (SQLException ex) {
                Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     return list_Intervenant_Seance;
}
 public ArrayList<String> list_Precedent_Seance(ArrayList<Seance> list_sea){
     ArrayList<String> list_Precedent_Seance = new ArrayList();
     for (Seance l : list_sea) {
            try {
                list_Precedent_Seance.add(Seance.nomSeance(l.getIdSeancePrecedente()));
            } catch (SQLException ex) {
                Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     return list_Precedent_Seance;
}
public void refreshSeance() {
    this.jTable1.doLayout();
    DefaultTableModel modell = new DefaultTableModel(
            new Object [4][5] ,
            new String [] {});	
    jTable1.setModel(modell);
    ArrayList<Seance> list_seance = null;
    try {
        list_seance = Seance.liste_Seance();
    } catch (SQLException ex) {
        Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
    }
    ArrayList<String> listeUE = list_UE_Seance(list_seance); 
    modell.addColumn("UE", listeUE.toArray()); 
    ArrayList<String> listeNom = list_nom_Seance(list_seance); 
    modell.addColumn("Nom", listeNom.toArray()); 
    ArrayList<String> listePrecedent = list_Precedent_Seance(list_seance); 
    modell.addColumn("Précédent", listePrecedent.toArray()); 
    ArrayList<String> listeIntervenant = list_Intervenant_Seance(list_seance); 
    modell.addColumn("Intervenant", listeIntervenant.toArray());
    
}
public void frame_Seance(int id_promo) {
    this.titre.setText("Séance");
    this.ajouter.setText("Ajouter une Séance");
    this.id_promo = id_promo;
    refreshSeance();
    
}
//**********************

    private int id_Etudiant() {
        int id = 0;
        int ligne = jTable1.getSelectedRow();
        int netudiant = Integer.parseInt((jTable1.getValueAt(ligne,2)).toString());
        String nom = (jTable1.getValueAt(ligne,0)).toString();
        String prenom = (jTable1.getValueAt(ligne,1)).toString();
        try {
            id = BD_MySQL.id_etudiants_promotion(netudiant,nom,prenom,4);
        } catch (SQLException ex) {
            Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
private int id_UE() {
        int id = 0;
        int ligne = jTable1.getSelectedRow();
        String nom = (jTable1.getValueAt(ligne,0)).toString();
        try {
            id = BD_MySQL.id_UE_promotion(nom,4);
        } catch (SQLException ex) {
            Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
private int id_Salle() {
        int id = 0;
        int ligne = jTable1.getSelectedRow();
        String nom = (jTable1.getValueAt(ligne,1)).toString();
        String nomBatiment = (jTable1.getValueAt(ligne,0)).toString();
        int capacite = Integer.parseInt((jTable1.getValueAt(ligne,2)).toString());
        try {
            id = BD_MySQL.id_Salle(nom,nomBatiment,capacite);
        } catch (SQLException ex) {
            Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }   
private int id_Intervenant() {
        int id = 0;
        int ligne = jTable1.getSelectedRow();
        String nom = (jTable1.getValueAt(ligne,0)).toString();
        String nomPrenom = (jTable1.getValueAt(ligne,1)).toString();
        String email =(jTable1.getValueAt(ligne,2)).toString();
        try {
            id = BD_MySQL.id_Intervenant(nom,nomPrenom,email);
        } catch (SQLException ex) {
            Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    } 
private int id_Batiment() {
        int id = 0;
        int ligne = jTable1.getSelectedRow();
        String nom = (jTable1.getValueAt(ligne,0)).toString();
        try {
            id = BD_MySQL.id_Batiment(nom);
        } catch (SQLException ex) {
            Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }  
private int id_Promotion() {
        int id = 0;
        int ligne = jTable1.getSelectedRow();
        String nom = (jTable1.getValueAt(ligne,0)).toString();
        try {
            id = BD_MySQL.id_Promotion(nom);
        } catch (SQLException ex) {
            Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
private int id_Creneau() {
        int id = 0;
        int ligne = jTable1.getSelectedRow();
        String nom = (jTable1.getValueAt(ligne,0)).toString();
        try {
            id = Seance.id_Creneau(nom);
        } catch (SQLException ex) {
            Logger.getLogger(Donner.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
 private enum Etat{
        UE,
        UE1,
        Salle,
        Salle1,
        Etudiant,
        Etudiant1,
        Intervenant,
        Intervenant1,
        Batiment,
        Batiment1,
        Creneau,
        Creneau1,
        Promotion,
        Promotion1
            
                
    }
    private Etat etat;
    public void setEtat(String n){
        if(n.equals("UE"))
            etat = Etat.UE;
        else if(n.equals("Salle"))
            etat = Etat.Salle;
        else if(n.equals("Intervenant"))
            etat = Etat.Intervenant;
        else if(n.equals("Etudiant"))
            etat = Etat.Etudiant;
        else if(n.equals("Batiment"))
            etat = Etat.Batiment;
        else if(n.equals("Creneau"))
            etat = Etat.Creneau;
        else if(n.equals("Promotion"))
            etat = Etat.Promotion;
    }
}
